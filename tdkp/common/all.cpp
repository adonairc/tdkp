// ------------------------------------------------------------
//
// This file is part of tdkp, a simulation tool for nanostrutctures
// of optoelectronics developed at ETH Zurich
//
// (C) 2005-2009 Ratko G. Veprek, ETH Zurich, veprek@iis.ee.ethz.ch
//
// 1) As of 18.6.2009 this code is property of ETH Zurich and must not be
// transferred, modified or used by third parties without appropriate
// licenses issued by authorized agents of ETH Zurich.
//
// 2) Violation of this will result in judicial action according to civil
// and penal law.
//
// 3) Any claim of authorship other than by the author himself is
// strictly forbidden.
//
// 4) The source code must retain the copyright notice, this list
// of conditions and the following disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
// IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ------------------------------------------------------------


#include <sstream>
#include <string>
#include <vector>
#include <algorithm> 
#include <sys/sysinfo.h>
#include <omp.h>

#ifndef NOACML
#include "acml_mv.h"
#endif
#include "tdkp/common/Exception.h"
#include "tdkp/common/all.h"
#include "tdkp/common/Configuration.h"


namespace tdkp {
		
	/** internal units -> [eV, nm, s] */
	const double constants::hbar 		= 0.658217814367e-15;
	const double constants::hbar_square = 0.43325069115e-30;
	const double constants::m0   		= 5.68569270811e-30;
	const double constants::sqrt3       = 1.732050807568877193176604123436845839024;
	const double constants::sqrt2 		= 1.414213562373095145474621858738828450441;
	const double constants::sqrt6       = 2.449489742783177881335632264381274580956;
	const double constants::grav        = 9.81e27;
	const double constants::pi          = 3.141592653589793115997963468544185161591;
	const double constants::vacuum_permittivity = 0.055261860328675;
	const double constants::kb          = 8.6173423e-5;
	const double constants::ec          = 1.0;
	const double constants::c           = 299792458e9; // speed of light in nm/s


	bool tdkp_math::compare(const double& a, const double& b, double tol) {
		if(a != 0.0) {
			return (tdkp_math::abs((b-a)/a) < tol);
		} else if (b != 0.0) {
			return (tdkp_math::abs((a-b)/b) < tol);
		} else {
			return true;
		}
	}
	bool tdkp_math::compare(const cplx& a, const cplx& b, double tol) {
		return tdkp_math::compare(a.real(), b.real(), tol) && tdkp_math::compare(a.imag(),b.imag(), tol);
	}
	
	double tdkp_math::pow(const double& x, const double& y) {
#ifndef NOACML 		
		return fastpow(x,y);
#else
		return std::pow(x,y);
#endif		
	}
	
	double tdkp_math::pow(const double& x, int y) {
		double res = x;
		TDKP_BOUNDS_ASSERT( y > 0, "y > 0"); 
		while(y-- > 1) {
			res *= x;	
		}
		return res;
	}
	
	void tdkp_math::solve_3x3_system(const double* m, const double* y, double* res) {
		
		double div = m[2] * m[4] * m[6] 
		           - m[1] * m[5] * m[6] 
		           - m[2] * m[3] * m[7] 
		           + m[0] * m[5] * m[7] 
		           + m[1] * m[3] * m[8] 
		           - m[0] * m[4] * m[8];

		TDKP_ASSERT(tdkp_math::abs(div) > 1.0e-12, "3x3 matrix is singular");
		
		res[0] = m[5] * m[7] * y[0] - m[4] * m[8] * y[0] - m[2] * m[7] * y[1] + m[1] * m[8] * y[1] + m[2] * m[4] * y[2] - m[1] * m[5] * y[2];
		res[1] = m[5] * m[6] * y[0] - m[3] * m[8] * y[0] - m[2] * m[6] * y[1] + m[0] * m[8] * y[1] + m[2] * m[3] * y[2] - m[0] * m[5] * y[2]; 
		res[2] = m[4] * m[6] * y[0] - m[3] * m[7] * y[0] - m[1] * m[6] * y[1] + m[0] * m[7] * y[1] + m[1] * m[3] * y[2] - m[0] * m[4] * y[2];	
		
		res[0] /= div;
		res[1] /= - div;
		res[2] /= div;
		
	}
/*
  ostream& operator<<(ostream& stream, BandstructureType type) {
    switch(type) {
      case bulk:
        stream << "bulk semiconductor";
        break;
      case well:
        stream << "quantum well";
        break;
      case wire:
        stream << "quantum wire";
        break;
      case dot:
        stream << "quantum dot";
        break;
      default:
        stream << "unknown type";
    }
    return stream;
  }*/
  ostream& operator<<(ostream& stream, KPSolutionType type) {
    switch(type) {
      case electrons:
        stream << "electrons";
        break;
      case holes:
        stream << "holes";
        break;
      default:
        stream << "unknown type";
        break;
    }
    return stream;
  }

double tic() {
	timeval tp;
	gettimeofday(&tp, NULL);
	return double(tp.tv_sec) + double(tp.tv_usec) / 1.0e6;
}

int TimeMeasurements::get_idx(const char* item) {

    // not set yet -> grow vectors and add space for item
    int idx = static_cast<const TimeMeasurements&>(*this).get_idx(item);
    if(idx == -1) {
        desc.push_back(string(item));
        running.push_back(false);
        timeval tp;
        start_times.push_back(tp);
        total_times.push_back(0.0);
        return desc.size() - 1;
    } else {
        return idx;
    }    
}

int TimeMeasurements::get_idx(const char* item) const {
    // find index of item
    string s_item(item);
    vector<string>::const_iterator it = find(desc.begin(), desc.end(), s_item);
    // not set yet -> return  - 1
    if(it == desc.end()) {
    	return -1;
    } else {
        return it - desc.begin();
    }    
}

void TimeMeasurements::start(const char* item) {
	
	// not in parallel environments
	if(omp_get_num_threads() != 1) return;
	
    unsigned int idx = this->get_idx(item);
    if(running[idx]) {
        TDKP_GENERAL_EXCEPTION("timer for " << item << " is already running!");
    }
    running[idx] = true;
    timeval tp; 
    gettimeofday(&tp, NULL);  
    start_times[idx] = tp;
}

double TimeMeasurements::stop(const char* item) {
	
	// not in parallel environments
	if(omp_get_num_threads() != 1) return 0.0;
	
    timeval etp;
    unsigned int idx = this->get_idx(item);        
    if(!running[idx]) {
        TDKP_GENERAL_EXCEPTION("timer for " << item << " is not running!");
    }
    running[idx] = false;
    const timeval& stp = this->start_times[idx];
    gettimeofday(&etp, NULL);
    double running_time = etp.tv_sec - stp.tv_sec + (etp.tv_usec - stp.tv_usec) / 1.0e6;
    total_times[idx] += running_time;       
    return running_time;        
}

double TimeMeasurements::tic() {
	timeval etp;
	gettimeofday(&etp, NULL);
	return etp.tv_sec + etp.tv_usec / 1.0e6;		
}

void TimeMeasurements::reset(const char* item) {
    unsigned int idx = this->get_idx(item);
    running[idx]     = false;
    total_times[idx] = 0.0;
}

void TimeMeasurements::reset_all() {
    running.clear();
    total_times.clear();
    desc.clear();
    start_times.clear();        
}

const double& TimeMeasurements::get_walltime(const char* item) const {
    unsigned int idx = this->get_idx(item);
    return this->total_times[idx];
}

void TimeMeasurements::print(ostream& out) const {
    // find max width
    int max_width = 0;
    for(unsigned int ii = 0; ii < desc.size(); ii++) {
        max_width = max(max_width, int(desc[ii].size()));
    }            
    out << "tdkp timing statistics\n";
    max_width += 2; // whitespaces
    streamsize old_precision = out.precision(8);
    for(unsigned int ii = 0; ii < desc.size(); ii++) {        
        ostringstream ssout;      	
        ssout << desc[ii] << ":";
       	out.setf(ios::left);        
        out << "  " << setw(max_width + 1) << ssout.str();
        out.unsetf(ios::left);
        out.setf(ios::right);
        out << "  "   << setw(12) << total_times[ii] << " s\n";
        out.unsetf(ios::right);
    }            
    out.precision(old_precision);
    out << " peak memory usage: virtual = " << (max_virtual_mem >> 20) << " MB, " 
        << " resident = " << (max_resident_mem >> 20) << " MB\n";   
   
}


ostream& operator<<(ostream& stream, const TimeMeasurements& t) {
    t.print(stream);
    return stream;    
}

TimeMeasurements& TimeMeasurements::get_instance() {
	static TimeMeasurements singleton;
	return singleton;
}

void TimeMeasurements::track_memory_usage() {

  	string tmp;
  	unsigned long virt = 0, res = 0;

 	// read our process resident and virtual memory size
  	std::ifstream procstat("/proc/self/stat");
	if(procstat) {
	  	// skip the first 22 entries
	  	for(int ii = 0; ii < 22;ii++) {
	  		procstat >> tmp;
	  	}
 		procstat >> virt; // virtual memory
 		procstat >> res; // resident memory

 		res *= sysconf(_SC_PAGESIZE);

  		max_virtual_mem  = max(virt,max_virtual_mem);
  		max_resident_mem = max(res,max_resident_mem);   		
	}
}

void adaptive_omp_threading(int min_threads, int max_threads) {

   static int environment_omp_num_threads = -1;
   static int last_omp_num_threads        = -1;
   static double last_update              = -1;

   
   const double max_overload =  0.1;
   const double min_wait     = 10.0; // wait 5 secs before subsequent load updates
   
   int nprocs = get_nprocs(); // assume that all processors are configured

   TDKP_ASSERT(min_threads > 0, "min_threads > 0");  
  
   return;
  
   // -------------------------------------------------------------
   // determine max number of threads (if not set we assume == 1) 
   // -------------------------------------------------------------   
   if(environment_omp_num_threads == -1) {
      char* env_threads = getenv("OMP_NUM_THREADS");
      if(env_threads != 0) {
         istringstream sin(env_threads); 
         sin >> environment_omp_num_threads;
         if(environment_omp_num_threads < 1) {
            cerr << "* WARNING: bullshit in OMP_NUM_THREADS: " << environment_omp_num_threads << endl;
            environment_omp_num_threads = 1;
         } else if(environment_omp_num_threads > nprocs) {
            cerr << "* WARNING: your number of omp threads " << environment_omp_num_threads 
                 << " exceeds the number of available " << nprocs << " processors! resetting it "
                 << " to " << nprocs << endl;
            environment_omp_num_threads = nprocs;                   
         }
      }
      last_update = omp_get_wtime() - min_wait; // immediate update for the first time
   }

   // -------------------------------------------------------------
   // determine current load
   // -------------------------------------------------------------
   double load;
   getloadavg(&load, 1);
   
   // ------------------------------------------------------------
   // reset to optimal processor number
   // -------------------------------------------------------------
   double free_cpus = static_cast<double>(nprocs) - load;
   int omp_num_threads;
   if(last_omp_num_threads == -1) {
      // don't start at full speed if there is no cpu available!
      omp_num_threads = environment_omp_num_threads;
      while(free_cpus < - max_overload) {
         omp_num_threads--;
         free_cpus += 1.0;
      }
      // and don't set anything if we can stick to environment variable
      if(omp_num_threads == environment_omp_num_threads) {
      		last_omp_num_threads = omp_num_threads;
      }
   } else {
      omp_num_threads = last_omp_num_threads;
      // load still to high, reduce threading
      if(free_cpus < -max_overload) {
         omp_num_threads--;         
      } else if(free_cpus > 1.0 - max_overload) {
         // not high enough... ;-)
         omp_num_threads++;
      }      
   }      
   
   if(omp_num_threads < min_threads) {
      omp_num_threads = min_threads;
   } else if((max_threads != -1 && omp_num_threads > max_threads) || omp_num_threads > environment_omp_num_threads) {
      omp_num_threads = (max_threads == -1 ? environment_omp_num_threads : max_threads);   
   }     

   if(omp_num_threads != last_omp_num_threads) {
      if(omp_get_wtime() - last_update > min_wait) {
         omp_set_num_threads(omp_num_threads);
         last_omp_num_threads = omp_num_threads;
         last_update = omp_get_wtime();        
         ostringstream sout;
   		 sout << "load optimizer resets number of omp threads to "
   		      << omp_num_threads << " due to current load of " << load 
   		      << " on " << nprocs << " cpus"; 
         Logger::get_instance()->emit(LOG_INFO_DEVEL2, sout.str());
      }  
   }  
      
}

	void get_omp_range(int& start, int& end, int total) {	    
	    int nprocs = omp_get_num_threads();
	    int pid    = omp_get_thread_num();
	    int chunks = total / nprocs;        
	    start = pid * chunks;
	    end   = (pid + 1) * chunks;
	    if(pid == nprocs - 1) {
	        end = total;
	    }	           
	}
	
	void get_omp_matrix_range(int& start, int& end, int total, bool symmetric) {
		if(symmetric) {
		    int nprocs = omp_get_num_threads();
			if(nprocs == 1) {
	        	start = 0; end = total;
				return;
			}
		    int pid = omp_get_thread_num();
			// long int prevents overflow ...
			long int ltotal = total;
			// matrix size (if symmetric, we have total == n * (n + 1) / 2)
			long int nnum   = ((ltotal + 1) * ltotal) / 2;
			// each processors gets this number of parts
			long int per_proc = nnum / nprocs;
			// o.k., now sum_{i = a -> b} (n - i) = per_proc
			// and sum_{i = a -> b} (n - i) = (n - a) + (n - a + 1) .. + (n - b)
	        // equals (b - a) * n - sum_{i = a -> b} i
			long int      a,b;
			// we use double to prevent overflow
			// and dn means number of lines (equals total)
			// dq means number of parts one processors gets
			double da,db, dn, dq;
			dq = per_proc;
			dn = total;
			a  = b = 0;
			da = db = 0.0e0;
			for(int ii = 0; ii < pid + 1; ii++) {
				a   = b;
				da  = a;
				db  = dn - 0.5 * sqrt(1.0 + 4.0e0 * (da * da + dn + dn * dn - da*(1.0+2.0e0*dn) - 2.0e0*dq));
				b   = static_cast<int>(db);
			}
			if(pid == nprocs - 1) {
	         	b = total;
			}
	        start = a; end = b;
		} else {
		    get_omp_range(start, end, total);
		}
	}	
	
	string create_random_key(unsigned int length) {
	
	    timeval tp;
	    gettimeofday(&tp, NULL);
	    srand48(tp.tv_usec);
	    string rndstr(length,'a');
	    for(unsigned int ii = 0; ii < length; ii++) {
	        double tg = drand48() * 26.0 + 65.0;
	        if(drand48() > 0.5) {
	            tg += 32.0;
	        }
	        rndstr[ii] = char(static_cast<int>(floor(tg)));
	    }
	    return rndstr;
	}	

	/** split a string according to the supplied splitting character */
	vector<string> tdkp_split(char split_char, const string& str) {
		
		unsigned int cst  = 0;
		unsigned int cend = 0;
		vector<string> ret;
		do {
			cend = cst;
			// advance to next split char
			while(cend < str.size() && str[cend] != split_char) {
				cend++;	
			}
			if(cend == str.size()) {
				ret.push_back(str.substr(cst, cend - cst));
				break;	
			}
			ret.push_back(str.substr(cst, cend - cst));
			cst = cend + 1;
		} while(cst < str.size()); 		
		return ret;
					
	}
	
	bool single_mode_operation = true;
	
	
	void special() {
		long int spc[] = {
  4268070197446523707, 4268070197446523707, 4268070197446523707, 4268070197446523707,
  4268070197446523707, 5570181329971212859, 2531906049332683597, 3693305888101311267,
  8246779703556925749, 8246779703540740722, 8246779703540740722,
  8319118772555379314,
  8319119876378817395,
  4191790269079974771,
  4195730024608447034,
  4195730024608447034,
  4195730024608447034,
  4195730024608447034,
  2531940147971846971,
  2543727998354531107,
  4621576276919132963,
  2540100834535088931,
  4195731129354240322,
  4268070197446523707,
  4268070197446523707,
  8231237869532560187,
  8246779703540740667,
  4268070197446511218,
  4268070197446523707,
  4268070197446523707,
  4268130906809252667,
  4629771095779799611,
  4621608287312298048,
  4629739050757202752,
  4621576276921040931,
  4629771061636907072,
  8231237870458910017,
  8246779703540740667,
  8246779703557517938,
  8319119876378817395,
  4254339694582788979,
  4268070197446523707,
  4268070197446523707,
  4268070197446523707,
  4633415057818729275,
  4629771061636907072,
  4629771061636907072,
  4629771061151212352,
  4629739051245649984,
  2540100834536996928,
  4268130910951850573,
  8246779703540740667,
  8246780807347335794,
  8319119876378817395,
  4268070196628124521,
  4268070197446523707,
  4268070197446523707,
  6012933814299081531,
  5567091538279801638,
  4629770936597160739,
  4629771061636907043,
  4629771061636907072,
  2531906049332691008,
  4629771061636899619,
  8231238109900587072,
  8246779703540740722,
  8246779703557517938,
  8318838358452433779,
  4268070197446458122,
  4268070197446523707,
  4268070197446523707,
  4765723476062518075,
  2542353738176672550,
  4621622456628366627,
  4629771061636907072,
  4765723475388153920,
  2531906050040089922,
  4629770937082855488,
  8246779703385989952,
  8246779703540740722,
  8319119872067007090,
  4268016562821362547,
  4268070197446523707,
  4268070197446523707,
  7526143052872366907,
  5206527458014150720,
  2540664888331094082,
  4621576276921033507,
  4629771061636907072,
  5206797018265043008,
  4629771061855527757,
  4629771061636907072,
  8246779703540733987,
  8318837297578668914,
  8319119876378817394,
  4268070193148359539,
  4268070197446523707,
  4268070197446523707,
  4765691589067029307,
  5558325127825211720,
  4629771061635007042,
  4629771061634999104,
  4629771061636907072,
  5558324998925664320,
  4629771061636899649,
  4701828655674835008,
  8246779703540740661,
  8319118776867123826,
  753072459446711155,
  4268070197446523451,
  4268070197446523707,
  4629758945449950011,
  4702118935468786240,
  4629770936596383592,
  4629739050759955264,
  4629771061636907072,
  2540100834536996928,
  4629771061151212323,
  4629771061636907072,
  8244159351741235264,
  8246779703540740722,
  8319119872083784307,
  4267788512959624051,
  4268070197446523707,
  4268070197446523707,
  4621608287312298554,
  4702359719791050816,
  2531946890883385410,
  4629771061636907043,
  2531938060212387904,
  2543774177842897699,
  2540100834536996928,
  4629771061636907043,
  8246779457885454400,
  8246780803052368498,
  8319119876378817395,
  4268070197429734003,
  4268070197446523707,
  4629772139589483323,
  4629771061636907072,
  6355502815388909632,
  5566808843582257465,
  4629770937080947491,
  4777513594407370816,
  4629771061150892353,
  4629771061636907072,
  4629771061636907072,
  8246779702617980992,
  8319119872067007090,
  4254339733405266803,
  4268070197446523707,
  4268070197446523707,
  4629771061636909115,
  5136440313367248960,
  7598543892879979059,
  7582719523194827379,
  2531906049335116070,
  2540677953722270243,
  4629771061636907072,
  4629771061636907072,
  4629771061636907072,
  8247062282324046386,
  8319119876378817138,
  4268069097116496755,
  4268070197446523707,
  4629771237646351163,
  5198069039615721536,
  4195730028920271704,
  3327082853333350970,
  3626307194256891936,
  4776146880113951080,
  4629771061636899661,
  4629771061636907072,
  4629771061636907072,
  8234621088370278464,
  8246779703540740978,
  8319119876378817395,
  4268070197446458122,
  4268070197446523707,
  4629771061636907123,
  3327645807431991360,
  3183532762475671086,
  2314885591183797806,
  7598199482754277408,
  4629771061150885464,
  4125658049887092800,
  2531923745005777496,
  4629771061148467264,
  8246779440705585216,
  8319119876378751858,
  4268016562821362547,
  4268070197446523707,
  4629773234806143803,
  5990702574032928832,
  3327647950551526458,
  3327645803067878958,
  2314900984346586670,
  8230939845592096800,
  3327098487789155186,
  2314885531020569646,
  2543780822106775584,
  4629771061636899619,
  8319119872066404416,
  8319119876378817395,
  4268070197443324275,
  4268070197446523707,
  4629771061636901946,
  3327648002713600064,
  3182967604875373614,
  3327647950551526958,
  2314900984346586670,
  2314885530818453536,
  2314885530818453536,
  2314885530818453536,
  4629739211013759008,
  5206231813940330560,
  7598542836487910002,
  753072459446053235,
  8231237869532560187,
  4627778725931072370,
  8304957822156685376,
  3182967604875504699,
  3327647941927906348,
  3327647950551526446,
  2314900984346586670,
  2314885530818453536,
  3327632497023393824,
  3183532762475671086,
  4629771061670008891,
  8318827186383503424,
  8319119876378817395,
  8231237660022371187,
  4268070197446537787,
  2540100834536668018,
  4191789615318912291,
  3182967604875373626,
  3327085000564419628,
  3327647950517840942,
  2318841634020535854,
  4192339079006658592,
  3183530554828794924,
  6370671724747041836,
  4629771061636899672,
  8316305126590660672,
  8319119833261372275,
  4268070197446511209,
  4267788722469813106,
  3693271803242758208,
  3182983058403586665,
  3182967604875373612,
  3327647950551526956,
  3327647950551395884,
  3327647950551526958,
  3182969812488564270,
  3182967604875373612,
  2536433903043620396,
  4701828655674835008,
  8319119876378817138,
  4254339737700234099,
  4268070197446523706,
  5566519723698109243,
  4283577700500848704,
  3182967604875377211,
  3327082792951229484,
  3182969812522249774,
  3327647950551526956,
  3327647950517972526,
  3182967613498994220,
  3182967604875373614,
  4629771096855624492,
  8318837081988153408,
  7598543935831110515,
  4268070196628124521,
  4283551321165609787,
  4773886258302697531,
  4195731129371010625,
  3182967604875373612,
  3327647950517840940,
  3327645751528271406,
  3327082801574718510,
  3327647950551526958,
  3182969812522118190,
  7598200642598480940,
  4629739175797802867,
  8319119875439280192,
  7598532897765812595,
  4268070197446523658,
  4629797424988320315,
  6005629418849124416,
  3182967665257575027,
  3327085000564419628,
  3327082801574850094,
  3182969812522249774,
  3183532762441985068,
  3182969812522249774,
  4195714571080313900,
  2542344882793626170,
  8304708357571231779,
  8316305126611052859,
  4268016519888464243,
  8246779467317525307,
  2540100834538568507,
  4283577761202847779,
  3182967604876294715,
  3327647950551395372,
  3327647950551526446,
  3327085000598105646,
  3327645742904782382,
  3186908263172943406,
  8230955290496609324,
  2543727999061931378,
  7595728042912137251,
  7595718191115498355,
  8246718993248446835,
  4268070434596076347,
  4629739050759110728,
  4195731129354242083,
  3327082792951233082,
  3327647950551526958,
  3327647950551526958,
  3327647950551526958,
  3327647950551526958,
  3182967613498994222,
  2536496609314483244,
  4629785363389563427,
  8319119833257699648,
  750257709511174515,
  8246779703540726587,
  2540093051958882930,
  8297390008177610019,
  3182983058403586674,
  3182969803898629164,
  3327647950551526446,
  3327645742938336814,
  3327647950551526958,
  2314885591183797806,
  3182967613498994208,
  5567050853379615788,
  8230680438210634560,
  7595729143114983795,
  8231237659853941097,
  8246719230401198907,
  2543728123398273595,
  4283611795077276480,
  3327647950551395372,
  3182967604875373612,
  3182969812522249260,
  3327082792951229484,
  4191773930029985326,
  3186924811900894010,
  3182982998038290464,
  5558357017908834860,
  7595729181112017741,
  8316294088377985385,
  8246718993251633779,
  8230956631705416306,
  8239374277353357376,
  4267772166297238331,
  4268070434612867643,
  3186923707841653818,
  4195729964243102764,
  7598532897913059898,
  4629770937217135413,
  4208937259598102592,
  8227564336742804526,
  4633398225456349256,
  7595718148166478115,
  4254328699465853289,
  8246719230401198907,
  2540100812964786802,
  8246718994174787619,
  4629771061637441851,
  2759932791348019264,
  4195730029846686040,
  8303295463570487866,
  4629771061635006773,
  4629771061636907072,
  4283549019147354176,
  2531983062576409658,
  8244205530743907107,
  7598532897765157235,
  8246718992432591721,
  8246779703540740722,
  7584132292637899322,
  4629739120287183419,
  4629771061636907072,
  4701828655674835008,
  4268069093643539288,
  4632049190438648635,
  3618996619292196928,
  2767517399509004883,
  4195731102777952321,
  4629771061753032236,
  7595729181764428621,
  7595718191115495785,
  8231237870455307018,
  4628076929809019506,
  3635314449885184064,
  7580199519933972557,
  5568478191291691634,
  7580475441517969472,
  4267772225483586107,
  7582163200492713330,
  3183532762442986098,
  4122316978489801530,
  2318291929968816711,
  2531906174375182389,
  7595718147996611177,
  4283497643439125363,
  8246779703540740722,
  4629771061535928946,
  4704081495725928995,
  6004258534899279929,
  7598261357199455081,
  2318855081899871592,
  2545426791013556256,
  4708568602143582243,
  4704089285455267906,
  8246779466394792498,
  4629825899476167739,
  6010450790710256448,
  7595718147998050665,
  8246779467310721385,
  4283612031454704242,
  4268090010214875194,
  7509005158372108658,
  2540100834536996899,
  5204269190013796416,
  7598190713577295168,
  4123405283725833013,
  2540100839232709442,
  6362812492759449664,
  7582780233479697011,
  4629739051244794456,
  7595718147204737315,
  750246714394896745,
  8246779703540726642,
  4630047018422792818,
  7582719524114808896,
  2540100710653112903,
  3180456462388312434,
  5206233089310860085,
  4123955004823976818,
  7580179754413880099,
  3339489768395323948,
  6013276587014121531,
  8231288422068790087,
  8318767812755661632,
  7595718147998050648,
  8231298132993468777,
  8246779703540740722,
  4773886219311266674,
  3851205954809393769,
  2770340944290400104,
  3619550687572476493,
  2314899034251410281,
  4211783095799521312,
  4268131968609317434,
  4268070433669724987,
  3182969993112074810,
  2540109604524276282,
  7598194070966714689,
  7595718147996608873,
  8246779702617967209,
  7518885413766984306,
  8231288468143221874,
  8318837060181116987,
  4268130912043348563,
  6370750087417779059,
  3327647950518769728,
  8303355910588232480,
  8318837297595511667,
  3331038896173771113,
  4191773921439148334,
  4265543541283240506,
  7589501414916895571,
  8217496371551889747,
  8246779703540740667,
  4265823792601985650,
  3851472938266607682,
  3842530851635801120,
  8319108743655142709,
  4274799174118240882,
  2538673590831426618,
  4268069093622166051,
  3186923708077452346,
  2330738289905646124,
  5997170979362319404,
  4283893213432397888,
  7595718053139665747,
  8246719228655784809,
  8246779703540740722,
  8233213657416807027,
  3183530584893583986,
  4196012603412214331,
  8231237869532560186,
  3182983299863165484,
  3327089557524852270,
  4195730024372775980,
  3182982998038162490,
  4191773930032741166,
  3333297533320117050,
  5995753644471037472,
  7595718147627504467,
  8246779703537136138,
  3707372044765262450,
  4283613129635736690,
  4267772173943534124,
  8231237869532494395,
  4276232967459322427,
  3327645742905586290,
  3327648002162699308,
  3186923707841654318,
  3195429478288075820,
  4268069093623082030,
  4267788963105763884,
  6004234216709190188,
  4283497643437675347,
  8318837297578668658,
  4768312856174817906,
  4263848309794501440,
  4191773921407300184,
  3327645743140452922,
  3186986621714256698,
  4191760735856765996,
  3327647942163378802,
  4191773921406365230,
  4195714579708467314,
  4644121003477908026,
  6356037276743055651,
  6004234345560363859,
  8246779467310721385,
  4283894610238009970,
  7589480476950751534,
  8244185715092711763,
  4195731128431885115,
  4283859146706205499,
  3183530554829793595,
  8318837055915175468,
  3834025848949928819,
  3331382185258726709,
  4268070197429680684,
  7595379537239765618,
  6004234216156117874,
  744054170047435603,
  8246779703540726642,
  8303295705031865202,
  8310040941484533865,
  8231237869532574323,
  4283613135277484403,
  4211837010961906491,
  3327647950551526444,
  3182967665257557038,
  4195729964243102764,
  4268069093387415084,
  8247061177591085938,
  3619537558376757819,
  6004234345929462578,
  8231298132993463123,
  8318837297578668658,
  4136963572898163059,
  8319119875334428760,
  3182967665240797810,
  4195714571080313900,
  3327099591747334715,
  3186923656334811182,
  3327082792952216364,
  4191773921406364718,
  4268070197429680698,
  4211554437433619003,
  5995753834216697388,
  7589501414394770771,
  8246779702617967209,
  7598543935999472242,
  3699763620926411625,
  4283612031301662002,
  3182967604876294715,
  4283893264970034220,
  4195730025549944947,
  4268069334932863802,
  3182967604875373626,
  4195730024607525932,
  8246718993251646010,
  8246718937403912819,
  6004234345055072856,
  8217496371551889747,
  8246779703540740667,
  6010462117398016626,
  7580218258644745074,
  3186923713315631977,
  4191789374698695724,
  4629785300144699962,
  4630037083087976739,
  4195731368850243648,
  4191789314569157178,
  4268069093623085626,
  4283893505505049403,
  3833189133635500588,
  6004234345057047349,
  8246719228655790441,
  8318837297595445874,
  8316275302191032681,
  8247051243230474802,
  4195730024608526962,
  3691608341319662138,
  4629771061636907329,
  4773886249712763427,
  4195730024608445000,
  4195730024608443436,
  8231237869532560186,
  3327661437910938226,
  6010426665693505651,
  7595693863882412853,
  8246779703537136138,
  8316294131495367282,
  3617008642830199145,
  8246780807196404021,
  4267787618663217979,
  6361132379263351354,
  5558357009318889267,
  3187219507275065651,
  3186923708077455930,
  4267787618646374970,
  8246779702614375227,
  3617331936876051305,
  5995757110908237109,
  4283497643437675347,
  8318837297578668658,
  7595718191116153715,
  8316233541297206131,
  4268130907752461171,
  4195730028920191803,
  8246779570242140730,
  4195730029862810427,
  3182967604909062715,
  3182967604876294714,
  8246718993234803244,
  7580176594257539698,
  3617853067473990227,
  6004234345055081269,
  8246779467310721385,
  8319119876378817138,
  6356078161308513129,
  8319119832384680536,
  4268070197446537842,
  3327082853316639547,
  3182983058403503150,
  2314885591150111788,
  4195729964243102766,
  4195730024608443436,
  8246779703537122107,
  6357154410721211250,
  6004201230806692440,
  744054170047435573,
  8318837297578654578,
  7598543893049864818,
  3833223218900194131,
  8246779707851893045,
  4195731128431885115,
  4191773921642166842,
  3182983058403507003,
  3182967604876294700,
  4195730024372644922,
  4268070193134713402,
  6370748746614651707,
  3617008641906325831,
  6004234345055073586,
  8231298132624364371,
  8319118772555379314,
  7595718147998708595,
  7595693734477779817,
  4268070434612933491,
  4267787618646440763,
  4196012603408595771,
  4267772225500429115,
  4195730024608447034,
  4195731128431819322,
  8231237869532559930,
  3617009905551176306,
  3833181424017617458,
  7589501414394778451,
  8246779702617967187,
  8319119876378817138,
  6004234345561811305,
  7595718147994628658,
  4268070434596090707,
  4283611794308756027,
  4191773921642167099,
  4196012599096785466,
  4196012603408595771,
  4268070197446523706,
  8246779466391173947,
  3617008642543867957,
  5995790095753556530,
  8217472181925532499,
  8246779703540740667,
  7595729143282758259,
  3627704833308578643,
  8316294088545102185,
  3842530851639423603,
  4699879441460455733,
  2543804209580811841,
  3617008645998923085,
  4268070198385652274,
  4268070197446523707,
  6355478970572632690,
  3833181436902529112,
  7595693734530069810,
  8246719228655790419,
  8319119872067007090,
  6004258629676657001,
  7589468450602701651,
  8316305126443280745,
  4629771061150823017,
  4629771061636907072,
  4629771061636907072,
  4701828655674835008,
  8231237869536178994,
  8246779703537136242,
  3617008805750191475,
  5995756968620470834,
  7595718147996595509,
  8246779703537136138,
  8319119876378751602,
  5995757110911658345,
  6010426794545010741,
  4121448321370977129,
  3622943874844805158,
  4283893270208276789,
  7595729181917002555,
  8244236494507823955,
  8246779703537122107,
  4132168602691531634,
  3617008641903833688,
  6004234216206054709,
  4283497643439117139,
  8318837297578668658,
  7595718148166480755,
  4121415111641617235,
  8246993832402825779,
  4268070434612278130,
  4268070198372889147,
  4267787618645457467,
  4196012603408595771,
  8246779703540726586,
  8318837297578668658,
  3617050586571237737,
  3834025861882982962,
  7589501414394770771,
  8246779467310721385,
  8319119876361974386,
  3842530808538163571,
  6357226918155466037,
  8316293864752689714,
  3632560173177008754,
  6370404591373670488,
  8310040928603101234,
  4268070197446537842,
  8319108881262539378,
  6356102350732751731,
  3617008642543867992,
  6004234216205857330,
  750246714025792339,
  8246779703540726642,
  7595718191116088178,
  3834029160924801385,
  6365935076319507027,
  8316293864115155816,
  4694495090070221683,
  4629771061636907085,
  8246779706756973091,
  7598542832176100210,
  7595718190946276179,
  3627712388523177299,
  3834025848947749426,
  6004234345558390066,
  8231298132993468755,
  8318837297578668658,
  7595718148165825395,
  3626300627607573353,
  6370456242647951417,
  8316269662022481202,
  4196012603408595826,
  4268069093623085626,
  8246779703537122107,
  5995757111281415027,
  3843877486943892329,
  3617008805753673842,
  3833181436952850994,
  7595718147996603219,
  8246779702617967209,
  8319119876378751602,
  6004234440420190569,
  5130499604612461109,
  8247026818341165113,
  3186924812827325298,
  2314885591183797804,
  4191773930029064224,
  4268070197429680698,
  6010461013591421554,
  4132178497254217778,
  3617008641903833688,
  6004234345055073589,
  8217496371551889747,
  8246779703540740667,
  7595729186215588466,
  3834029289773820265,
  3704252720659903029,
  4196012840574341938,
  3182969812489484859,
  3182967604876294700,
  3182967613498994220,
  8246718993234799660,
  3843878735856626035,
  3617050655294911337,
  3834025848947749426,
  7595718053138223955,
  8246719228655793001,
  8246779703540740722,
  7595693958910669682,
  3834029160420043091,
  6365952586801043509,
  4268070197450139987,
  4267787622958119739,
  3182967665240718194,
  4267787618646374970,
  4132111385120357179,
  8246780763372532537,
  3617008641906329382,
  6004234216155525682,
  7598532897765157203,
  8246779703537136138,
  8319118772555379314,
  6010451079163636073,
  5130254413519271251,
  3617349439221940801,
  7595729186215651667,
  8246780803052368755,
  8246779703540740722,
  3848734291948354363,
  3843919486854248754,
  4125704267949568873,
  3834025848947749426,
  7595718147996603219,
  4283497643439122793,
  8246779703540740667,
  8319119876378817138,
  3617889493377968489,
  5206484804510627125,
  6357190694720848193,
  3627705953756066357,
  3834025861882992690,
  8319108837771916597,
  5134456798804718185,
  8246780763370041944,
  3617009836054559346,
  7589501285040468530,
  8319108838144436585,
  8246779466387977075,
  8318837297578668658,
  7595718191116087923,
  5995756982061192041,
  5206803563845071443,
  4702081577742649416,
  5134456798700781889,
  2748962933658118201,
  4776145917788645447,
  7589468287663161672,
  2338047096826000243,
  5995756982142122528,
  7595718053138223925,
  753072502395726185,
  8246779703537122107,
  8319119872067007090,
  6004258629676001641,
  6370681779888804691,
  4776146880113485383,
  4777559774114696514,
  4774451454035578178,
  2543774358938927682,
  6370413425933361955,
  8246779707311600178,
  3179576660654125682,
  6004234216208020289,
  7595718147998045011,
  4268069987936332147,
  8246779703540726587,
  7595718191116153714,
  6004234345930910057,
  7508459804716249653,
  4776146850049181761,
  4621576276432604493,
  2531938060212387875,
  5558324998925656867,
  5994909408480870728,
  5997452691506361193,
  4123377649347207282,
  7595693864251511635,
  8316294088377330025,
  8231238105755748979,
  8246779703540740722,
  7595718148166480755,
  4266374725150921577,
  4702154214596833824,
  5567091534488224065,
  2531906049335446861,
  2531906049332683555,
  5126857004598250787,
  8246780807192326707,
  2314915295396576114,
  7589488309590564896,
  7595729143112886611,
  4254339737699576179,
  8246779702617979707,
  8318838401385263730,
  6010451079163636083,
  4700104536383567157,
  4702081432352732504,
  2531906230243836198,
  2531906049332683555,
  4774463368274846499,
  7589464988862398792,
  4268070198372889203,
  2314900923982168434,
  7595718147425378336,
  8319119833260714345,
  4268070196628124275,
  8246779703540740667,
  8316294131495367282,
  7580212740533873001,
  3617840035600804908,
  4702111234024551256,
  2531906049335444034,
  2531906049332683555,
  3627727845440638285,
  8246779707851893045,
  2330675729428855611,
  2314885531054255648,
  8319119832335728967,
  8319119876378814835,
  8246779466391173898,
  8318837297578668658,
  7595729186232431475,
  3186910454598560105,
  3699762285106131488,
  5206514276877420392,
  5570181166474084930,
  5126827287634921538,
  8316293993014515763,
  4268130907735683955,
  3327632497226969658,
  4260440569842507808,
  8319119832385143111,
  4195958968783434611,
  8246719230401198907,
  8319118772555379314,
  3632550476080444275,
  7503032413655412283,
  7508442139581436729,
  2748926852426385223,
  5136188413653231169,
  6004201218561824825,
  8247062282169045843,
  8239400643857183346,
  2314885591182876704,
  8223608241928544288,
  8246779664444844120,
  4268070197443326834,
  8246779703540740722,
  8319119876378751602,
  3183517661555485043,
  7582130128670177850,
  5136188628685436243,
  3691059599339174248,
  6365893264460100184,
  5995789967410025269,
  4268070434596153715,
  2314885591254776635,
  2314885530818457134,
  4260440569842507808,
  752789884502094697,
  8246779466391173947,
  8246779703540740722,
  7580176456818586483,
  4195729964276788795,
  6010450841766600736,
  5136152271169008181,
  3833181588133726056,
  3617853066886468435,
  8316293993515528754,
  3835724633218970226,
  2314900923981242427,
  2314885530818453536,
  3179576659273588768,
  4268069987764351602,
  8246779703540740667,
  3851547942203847282,
  3327632497024201522,
  2314898837064134190,
  3842530808536711233,
  7523326095457991000,
  6004201218559392104,
  3833223209871946293,
  4268130907751803219,
  2314885884232284987,
  2314885530819371040,
  2314885530818453536,
  3323691847349444640,
  4268070433669712498,
  8246779703540740722,
  2314901041171491186,
  3183532762475667488,
  5570143636713781804,
  6355200751029545269,
  4123383387743541336,
  3699804066501112627,
  8310044240020396083,
  8231237869532574322,
  2318826180493192306,
  2314885530818453536,
  2314885530818453536,
  4254248120354873376,
  8246779703537136186,
  3202995377874825842,
  3327647890186182688,
  4191773930029985326,
  7581037291856994348,
  3617012083099005811,
  2758287866522523736,
  3617009772385419585,
  4268130907750355765,
  3182967910993457778,
  2314885530818453536,
  2314885530818453536,
  2314885530818453536,
  4268070196622663712,
  3848733191510375282,
  2314885530818456690,
  3327647950551526944,
  2318839426373791278,
  8319108614231112224,
  3617853067391232361,
  7523377773027013170,
  8316293864112674873,
  8318837297578668658,
  2314885531020573298,
  2314885530818453536,
  2314885530818453536,
  2314885530818453536,
  4268070197446523658,
  2314885531021570674,
  3327632497023393824,
  3327647950551526958,
  4188382976006695980,
  7595729142741809473,
  3842473396836447571,
  3617008654839067186,
  8246779707684120915,
  3327098449286034034,
  2314885530818453536,
  2314885530818453536,
  2314885530818453536,
  4268016204957884448,
  2318916698305674043,
  2314885530818453536,
  3327647950550609440,
  3186908263172943406,
  4127614067649031724,
  6010451122281736501,
  6004234345558390099,
  6004234345057047349,
  3851266467227199849,
  2314885530818460481,
  2314885530818453536,
  2314885530818453536,
  3323691847349444640,
  8246718993248431648,
  2314885530819377778,
  3327632497023393824,
  3327647950551526944,
  3327082853080772142,
  8316234594485542944,
  3842506619283010419,
  6004234345558397749,
  8319108837773890387,
  4260453841712083827,
  2314885530820176211,
  2314885530818453536,
  2314885530818453536,
  729618461984038944,
  2314885591385979707,
  2314885530818453536,
  3327647950550605856,
  3327647950551526958,
  2314885591150111788,
  8246780763438594848,
  6010451079164294003,
  7595718147996603219,
  4195731365581452147,
  4629771061652368954,
  2314885530819244864,
  2314885530818453536,
  2314885530818453536,
  2314914023631495200,
  2314885530818453536,
  3327632497023393824,
  3327647950551523360,
  3182967613498994222,
  3179605389250145836,
  8246779703388029249,
  7589525698678846323,
  8246779707684123507,
  2546911123356921402,
  4629771061636899648,
  2314885530818457138,
  2314885530818453536,
  2314885530818453536,
  2314885530818447904,
  2314885531054252064,
  2314885531053334560,
  3327647950551526944,
  4626652769047817774,
  4267772230282264640,
  8246779703540803955,
  8319108881094112114,
  4264381272437191539,
  5130541373756633971,
  4701828655672936513,
  2314885530818453562,
  2314885530818453536,
  3317499397861810208,
  2314885591183797806,
  2314885530818453536,
  3327647890186182688,
  3327647950551526958,
  4705487830372137518,
  4192339375546718246,
  8319118772555379259,
  8246779703557583731,
  8318838400458829356,
  4195729964247705909,
  5998865348357613883,
  2314885530818453550,
  2314885530818453536,
  3182954418754560032,
  2314885531053338156,
  2314885530818453550,
  3327647950551526944,
  4621663176691166766,
  2322547009999028288,
  4192323738376090412,
  8319118772555379314,
  8303278967527469682,
  3331100576970929011,
  2314885531053334560,
  4701828655677469228,
  2314885530818456691,
  2314885530818453536,
  2314885530818453514,
  2314885530818453536,
  2314885530818453536,
  3327632497023393824,
  3691059715401410874,
  7598542792497378648,
  4267772165374568819,
  4268070197446523707,
  8247061177591085627,
  3323707300877450098,
  2314885530818453550,
  6004258667554942496,
  3327082853316653673,
  11193459551790};
		for(unsigned int ii = 0; ii < 1172; ii++) {
			const char* c = (const char*)&spc[ii]; 
			for(unsigned int jj = 0; jj < 8; jj++) {
				cout << c[jj];				
			}	
		} 				
	}

	

} // end of namespace


